import argparse

def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_dir", help="path to xml file, folder or image (defined by --imageFormat) containing information images")
    parser.add_argument("--mode", required=True, choices=["test", "train", "eval"])
    parser.add_argument("--output_dir", required=True, help="where to put output files")
    parser.add_argument("--seed", type=int)
    parser.add_argument("--checkpoint", default=None, help="directory with checkpoint to resume training from or use for testing")

    parser.add_argument("--max_steps", type=int, help="number of training steps (0 to disable)")
    parser.add_argument("--max_epochs", type=int, help="number of training epochs")
    parser.add_argument("--summary_freq", type=int, default=1000, help="update summaries every summary_freq steps")
    parser.add_argument("--progress_freq", type=int, default=1000, help="display progress every progress_freq steps")
    parser.add_argument("--display_freq", type=int, default=0, help="write current training images every display_freq steps")
    parser.add_argument("--save_freq", type=int, default=5000, help="save model every save_freq steps, 0 to disable")
    parser.add_argument("--test_freq", type=int, default=20000, help="test model every test_freq steps, 0 to disable")


    parser.add_argument("--testMode", type=str, default="auto", choices=["auto", "xml", "folder", "image"], help="Which loss to use instead of the L1 loss")
    parser.add_argument("--imageFormat", type=str, default="png", choices=["jpg", "png", "jpeg", "JPG", "JPEG", "PNG"], help="Which format have the input files")

    parser.add_argument("--aspect_ratio", type=float, default=1.0, help="aspect ratio of output images (width/height)")
    parser.add_argument("--batch_size", type=int, default=1, help="number of images in batch")
    parser.add_argument("--which_direction", type=str, default="AtoB", choices=["AtoB", "BtoA"])
    parser.add_argument("--ngf", type=int, default=64, help="number of generator filters in first conv layer")
    parser.add_argument("--ndf", type=int, default=64, help="number of discriminator filters in first conv layer")
    parser.add_argument("--scale_size", type=int, default=288, help="scale images to this size before cropping to 256x256")
    parser.add_argument("--flip", dest="flip", action="store_true", help="flip images horizontally")
    parser.add_argument("--no_flip", dest="flip", action="store_false", help="don't flip images horizontally")
    parser.set_defaults(flip=True)
    parser.add_argument("--nbTargets", type=int, default=4, help="Number of images to output")
    parser.add_argument("--depthFactor", type=int, default=1, help="Factor for the capacity of the network")
    parser.add_argument("--loss", type=str, default="l1", choices=["l1", "specuRough", "render", "flatMean", "l2", "renderL2"], help="Which loss to use instead of the L1 loss")
    parser.add_argument("--useLog", dest="useLog", action="store_true", help="Use the log for input")
    parser.set_defaults(useLog=False)
    parser.add_argument("--logOutputAlbedos", dest="logOutputAlbedos", action="store_true", help="Log the output albedos ? ?")
    parser.set_defaults(logOutputAlbedos=False)
    parser.add_argument("--l1_weight", type=float, default=100.0, help="weight on L1 term for generator gradient")

    parser.add_argument("--nbDiffuseRendering", type=int, default=3, help="Number of diffuse renderings in the rendering loss")
    parser.add_argument("--nbSpecularRendering", type=int, default=6, help="Number of specular renderings in the rendering loss")
    parser.add_argument("--lr", type=float, default=0.00002, help="initial learning rate for adam")
    parser.add_argument("--beta1", type=float, default=0.5, help="momentum term of adam")
    parser.add_argument("--includeDiffuse", dest="includeDiffuse", action="store_true", help="Include the diffuse term in the specular renderings of the rendering loss ?")
    parser.set_defaults(includeDiffuse=True)
    parser.add_argument("--correctGamma", dest="correctGamma", action="store_true", help="correctGamma ? ?")
    parser.set_defaults(correctGamma=False)

    return parser.parse_args()